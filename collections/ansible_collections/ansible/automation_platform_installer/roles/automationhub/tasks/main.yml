---
- name: Set Hub hostname
  set_fact:
    _hub_hostname: "{{ routable_hostname | default(ansible_host) }}"

- name: Include variables
  include_vars: main.yml

- name: Check if assets directory exists
  stat:
    path: /var/lib/pulp/assets
  register: pulp_assets_dir

- name: Ensure /var/lib/pulp/assets has proper ownership
  file:
    path: /var/lib/pulp/assets
    state: directory
    owner: pulp
    group: pulp
    recurse: true
  changed_when: false
  failed_when: false
  when: pulp_assets_dir.stat.exists

- name: Check installed version of PG
  shell: rpm -q --queryformat '%{VERSION}' postgresql | cut -d'.' -f1
  ignore_errors: true
  register: pg_installed_version
  args:
    warn: false

- block:
    - name: Disable PostgreSQL 12 module
      command: dnf module -y reset 'postgresql'
      args:
        warn: false
      when: not pg_installed_version.failed

    - name: Enable PostgreSQL 13
      command: dnf module -y enable 'postgresql:13'
      args:
        warn: false

  become: true
  when:
    - pg_installed_version.failed or pg_installed_version.stdout | trim | int != 13
    - ansible_distribution_major_version == "8"

- name: Install PostgreSQL 13
  package:
    name: 'postgresql'
    state: present

- name: Ensure tar is installed
  package:
    name: tar

- name: Generate a Pulp secret
  set_fact:
    pulp_secret: "{{ lookup('password', '/dev/null length=128') }}"
  run_once: true
  no_log: true

- name: Determine proper protocol and port
  set_fact:
    pulp_proto: "{{ automationhub_disable_https | bool | ternary('http', 'https') }}"
    pulp_port: "{{ automationhub_disable_https | bool | ternary('80', '443') }}"
  run_once: true

- name: Determine proper parameter for proper install of plugin
  set_fact:
    galaxy_ng: {}
  when: pulp_install_source == 'packages'

- name: Determine proper parameter for proper install of plugin (pip)
  set_fact:
    galaxy_ng:
      version: '{{ automationhub_package_version | default(omit) }}'
  when:
    - automationhub_git_url is undefined
    - pulp_install_source == 'pip'

- name: Determine proper parameter for proper install of plugin (git)
  set_fact:
    galaxy_ng:
      source_dir: '{{ automationhub_git_source_dir | default("~/galaxy_ng") }}'
      git_url: '{{ automationhub_git_url }}'
      git_revision: '{{ automationhub_git_version | default(omit) }}'
  when:
    - automationhub_git_url is defined
    - pulp_install_source == 'pip'

- name: Determine plugins list
  set_fact:
    pulp_install_plugins:
      pulp-container:
        version: "{{ automationhub_pulp_container_version | default(omit) }}"
      pulp-ansible:
        version: "{{ automationhub_pulp_ansible_version | default(omit) }}"
      galaxy-ng: '{{ galaxy_ng }}'
  run_once: true
  when: pulp_pkg_repo is defined or pulp_install_source == 'pip'

- name: Determine plugins list
  set_fact:
    pulp_install_plugins:
      pulp-container: {}
      pulp-ansible: {}
      galaxy-ng:
        collectstatic: false
        version: '{{ automationhub_package_version }}'
  run_once: true
  when:
    - pulp_pkg_repo is undefined
    - pulp_install_source == 'packages'

- name: Determine Automation Hub main URL
  set_fact:
    _automationhub_main_url: "{{ automationhub_main_url | default(pulp_proto + '://' + hostvars[groups['automationhub'][0]]['_hub_hostname'], true) }}"
    _automationhub_url_for_pulp: "{{ automationhub_main_url | default(pulp_proto + '://' + _hub_hostname, true) }}"

- name: Configure SSO client
  import_role:
    name: ansible.automation_platform_installer.sso
    tasks_from: configure_client
  vars:
    # For client
    sso_client_attributes:
      user.info.response.signature.alg: RS256
      request.object.signature.alg: RS256
    sso_client_authorization_services_enabled: no
    sso_client_direct_access_grants_enabled: yes
    sso_client_id: '{{ sso_automation_hub_client_id }}'
    sso_client_name: '{{ sso_automation_hub_client_name }}'
    sso_client_redirect_uris: '{{ _automationhub_main_url }}/*'
    sso_client_root_url: '{{ _automationhub_main_url }}/'
    sso_client_secret: '{{ sso_automation_hub_client_secret | default(omit) }}'
    sso_client_web_origins: '{{ _automationhub_main_url }}/*'

    # For client role
    sso_client_config_roles:
      hubadmin:
        name: '{{ sso_automation_hub_client_admin_role }}'
        description: 'An administrator role for {{ sso_automation_hub_client_name }}'

  run_once: true
  when: sso_host | default('') | length

- name: Obtain list of controller nodes
  set_fact:
    controller_nodes: "{{ controller_nodes | default([]) + [hostvars[item]['controller_base_url']] }}"
  with_items: "{{ groups['automationcontroller'] }}"
  when:
    - groups['automationcontroller'] | default([]) | length
    - hostvars[item]['controller_base_url'] is defined
  run_once: true

- name: Default pulp settings
  set_fact:
    pulp_settings:
      allowed_content_checksums:
        - "sha224"
        - "sha256"
        - "sha384"
        - "sha512"
      secret_key: "{{ pulp_secret }}"
      content_origin: "{{ _automationhub_url_for_pulp }}"
      token_server: "{{ _automationhub_url_for_pulp }}/token"
      x_pulp_api_proto: "{{ pulp_proto }}"
      x_pulp_api_host: "{{ _automationhub_url_for_pulp | urlsplit('hostname') }}"
      x_pulp_api_port: "{{ pulp_port }}"
      x_pulp_api_prefix: "pulp_ansible/galaxy/automation-hub/api"
      galaxy_api_default_distribution_base_path: "published"
      galaxy_enable_api_access_log: "{{ automationhub_enable_api_access_log | bool }}"
      galaxy_enable_unauthenticated_collection_access: "{{ automationhub_enable_unauthenticated_collection_access | bool }}"
      galaxy_enable_unauthenticated_collection_download: "{{ automationhub_enable_unauthenticated_collection_download | bool }}"
      galaxy_require_content_approval: '{{ automationhub_require_content_approval | bool }}'
      galaxy_auto_sign_collections: '{{ automationhub_auto_sign_collections | default(not automationhub_require_content_approval) | bool }}'
      databases:
        default:
          HOST: "{{ automationhub_pg_host }}"
          PORT: "{{ automationhub_pg_port }}"
          ENGINE: django.db.backends.postgresql_psycopg2
          NAME: "{{ _automationhub_pg_database }}"
          USER: "{{ _automationhub_pg_username }}"
          PASSWORD: "{{ automationhub_pg_password }}"
          OPTIONS:
            sslmode: "{{ _automationhub_pg_sslmode }}"
            sslrootcert: "{{ ca_trust_bundle }}"
      redis_url: 'unix:///var/run/redis/redis.sock'
      ansible_api_hostname: "{{ _automationhub_url_for_pulp }}"
      ansible_content_hostname: "{{ _automationhub_url_for_pulp }}"
      content_bind: "{{ pulp_content_bind }}"
      connected_ansible_controllers: "{{ controller_nodes | default(omit) }}"
  no_log: true

- name: Add SSO settings to pulp_settings
  block:

    - set_fact:
        sso_settings:
          keycloak_host: "{{ sso_redirect_host | default(sso_host) }}"
          keycloak_port: "{{ sso_port }}"
          keycloak_protocol: "{{ sso_protocol }}"
          keycloak_realm: "{{ sso_automation_platform_realm }}"
          keycloak_admin_role: "{{ sso_automation_hub_client_admin_role }}"
          keycloak_group_token_claim: "{{ sso_automation_hub_group_token_claim | default(omit) }}"
          keycloak_role_token_claim: "{{ sso_automation_hub_role_token_claim | default(omit) }}"
          keycloak_host_loopback: "{{ sso_automation_hub_host_loopback | default(omit) }}"
          social_auth_keycloak_key: "{{ sso_automation_hub_client_id }}"
          social_auth_keycloak_secret: "{{ sso_client_secret }}"
          social_auth_keycloak_public_key: "{{ sso_realm_public_key }}"
          social_auth_login_redirect_url: "{{ sso_automation_hub_login_redirect_url | default(omit) }}"
          galaxy_verify_keycloak_ssl_certs: "{{ sso_ssl_validate_certs | default(True) }}"

    - set_fact:
        pulp_settings: "{{ pulp_settings | combine(sso_settings) }}"

  run_once: true
  no_log: true
  when: sso_host | default('') | length

# Avoid the pulp role that installs the database
- name: Install hub via pulp installer
  include_role:
    name: "{{ item }}"
  vars:
    pulp_repos_enable: False
  with_items:
    - "pulp.pulp_installer.pulp_redis"
    - "pulp.pulp_installer.pulp_services"
    - "pulp.pulp_installer.pulp_webserver"

- name: Use internal CA
  include_role:
    name: certificate_authority
    tasks_from: sign_service.yml
  vars:
    aap_ca_servicename: automationhub
    aap_service_owner: root
    aap_service_group: 'pulp'
    aap_service_cert_path: '/etc/pulp/certs'
    aap_service_cert_name: 'pulp_webserver'
    aap_service_cert_extension: 'crt'
  when:
    - automationhub_ssl_cert is not defined
    - automationhub_ssl_key is not defined

- name: Trigger nginx notifier for internally managed certificate changes
  debug:
    msg: 'Restart for nginx triggered due to internally managed certificate pair change.'
  changed_when: True
  notify:
    - reload nginx
  when: aap_service_webserver_restart | default(False)

- block:

    - name: Install automation-hub
      package:
        name: '{{ automationhub_package_name }} = {{ automationhub_package_version }}'
        state: latest
      notify: Restart pulpcore-api.service

    - name: Verify automation-hub package
      command: 'rpm -V {{ automationhub_package_name }}'
      register: hub_rpm_verify
      ignore_errors: true

    - name: Re-install automation-hub if verification failed
      command: 'dnf -y reinstall {{ automationhub_package_name }} = {{ automationhub_package_version }}'
      when: hub_rpm_verify is failed
      notify: Restart pulpcore-api.service

    - name: Ensure automation_hub assets directory is present
      file:
        path: /var/lib/pulp/assets
        state: directory
        owner: pulp
        group: pulp
        mode: 0755

    - name: Ensure automation_hub static are present
      file:
        path: /var/lib/pulp/assets/galaxy_ng
        src: /usr/share/automation-hub
        state: link
        owner: pulp
        group: pulp

  when:
    - pulp_pkg_repo is undefined
    - pulp_install_source == 'packages'
  become: true

- block:
    - name: Download galaxy ui from automationhub_ui_download_url
      command:
        cmd: python3 setup.py prepare_static --force-download-ui
        chdir: '{{ automationhub_git_source_dir | default("~/galaxy_ng") }}'
      environment:
        ALTERNATE_UI_DOWNLOAD_URL: '{{ automationhub_ui_download_url }}'
      when: automationhub_ui_download_url | default('') | length

    - name: Download galaxy ui
      command:
        cmd: python3 setup.py prepare_static --force-download-ui
        chdir: '{{ automationhub_git_source_dir | default("~/galaxy_ng") }}'
      when: not automationhub_ui_download_url | default('') | length

    - name: Ensure static files are present
      file:
        path: /var/lib/pulp/assets/galaxy_ng
        src: '{{ automationhub_git_source_dir | default("~/galaxy_ng") }}/galaxy_ng/app/static/galaxy_ng'
        state: link
        owner: pulp
        group: pulp
      notify: Restart pulpcore-api.service

  when:
    - pulp_pkg_repo is undefined
    - pulp_install_source == 'pip'
  become: true
  become_user: pulp

- block:
    - name: Create galaxy-importer directory
      file:
        path: "/etc/galaxy-importer/"
        state: directory
        mode: '0755'

    - name: Write galaxy-importer config
      template:
        src: galaxy-importer.cfg.j2
        dest: /etc/galaxy-importer/galaxy-importer.cfg
        mode: '0644'
  when: galaxy_importer_settings is defined

# symlink automation-hub and pulpcore services
- name: Create the automation-hub service symlink
  file:
    path: /etc/systemd/system/automation-hub.service
    src: /usr/lib/systemd/system/pulpcore.service
    state: link
