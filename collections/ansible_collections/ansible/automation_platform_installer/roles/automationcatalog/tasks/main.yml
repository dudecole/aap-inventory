---
- include_vars: "{{ item }}"
  with_first_found:
    - files:
        - "{{ ansible_os_family }}-{{ ansible_distribution_major_version }}.yml"
      paths: "../vars"

- name: Determine Automation Catalog main URL
  set_fact:
    automationcatalog_main_url: "{{ automationcatalog_web_proto }}://{{ routable_hostname | default(ansible_host)  }}:{{ automationcatalog_web_port | default(_automationcatalog_https_port) }}"
  run_once: True
  when: not automationcatalog_main_url | default('') | length

- name: Configure SSO client
  block:
    - name: Include SSO client configuration variables for roles and scopes
      include_vars:
        file: sso_client_configuration.yml
        name: sso_client_config

    - name: Include SSO client configuration variables for users and groups
      include_vars:
        file: "{{ sso_automationcatalog_user_group_configuration }}"
        name: sso_seed_config
      when: sso_automationcatalog_create_user_group | bool

    - name: Configure SSO Client
      import_role:
        name: ansible.automation_platform_installer.sso
        tasks_from: configure_client
      vars:
        # For client
        sso_client_admin_url: "{{ automationcatalog_main_url }}/admin"
        sso_client_authorization_services_enabled: yes
        sso_client_authorization_settings:
          decisionStrategy: AFFIRMATIVE
        sso_client_direct_access_grants_enabled: no
        sso_client_id: "{{ sso_automationcatalog_client_id }}"
        sso_client_name: "{{ sso_automationcatalog_client_name }}"
        sso_client_redirect_uris:
          - "{{ automationcatalog_main_url }}/"
          - "{{ automationcatalog_main_url }}/*"
          - "*"
        sso_client_root_url: "{{ automationcatalog_main_url }}/"
        sso_client_secret: "{{ sso_automationcatalog_client_secret | default(omit) }}"
        sso_client_web_origins: "{{ automationcatalog_main_url }}/*"

        # For client role
        sso_client_config_roles: "{{ sso_client_config.roles }}"
        sso_client_config_scopes: "{{ sso_client_config.scopes }}"

        # For service account
        sso_client_realm_management_roles:
          - view-users

        # For users and groups
        sso_seed_users: "{{ sso_seed_config.users | default('') }}"
        sso_seed_groups: "{{ sso_seed_config.groups | default('') }}"
  run_once: true
  when: sso_host | default('') | length

- name: Obtain web application worker count
  set_fact:
    automationcatalog_gunicorn_workers: "{{ ansible_processor_count * 2 + 1 | int}}"

- name: Check installed version of PG
  shell: rpm -q --queryformat '%{VERSION}' postgresql | cut -d'.' -f1
  ignore_errors: true
  register: pg_installed_version
  args:
    warn: false

- block:
    - name: Disable PostgreSQL module
      command: dnf module -y reset 'postgresql'
      args:
        warn: false
      when: not pg_installed_version.failed

    - name: "Enable PostgreSQL {{ automationcatalog_postgresql_version }} dnf modules"
      shell: |
        dnf module -y enable 'postgresql:{{ automationcatalog_postgresql_version }}'
      args:
        warn: false

    - name: "Install PostgreSQL client {{ automationcatalog_postgresql_version }}"
      package:
        name: "@postgresql:{{ automationcatalog_postgresql_version }}/client"
        state: present

  when:
    - pg_installed_version.failed or pg_installed_version.stdout | trim | int != automationcatalog_postgresql_version
    - ansible_distribution_major_version == "8"

- name: Install PostgreSQL
  package:
    name: postgresql
    state: present
  when:
    - pg_installed_version.failed or pg_installed_version.stdout | trim | int != automationcatalog_postgresql_version
    - ansible_distribution_major_version == "9"

- name: Check installed version of redis
  shell: rpm -q --queryformat '%{VERSION}' redis | cut -d'.' -f1
  ignore_errors: true
  register: redis_installed_version
  args:
    warn: false

- block:
    - name: Disable Redis module
      command: dnf module -y reset 'redis'
      args:
        warn: false
      when: not redis_installed_version.failed

    - name: "Enable Redis {{ automationcatalog_redis_version }} dnf modules"
      shell: |
        dnf module -y enable 'redis:{{ automationcatalog_redis_version }}'
      args:
        warn: false

  when:
    - redis_installed_version.failed or redis_installed_version.stdout | trim | int != automationcatalog_redis_version
    - ansible_distribution_major_version == "8"

- name: Install Redis
  package:
    name: "redis"
    state: present

- name: Install redis.conf
  template:
    src: redis.conf.j2
    dest: "{{ redis_conf_location }}"
    force: True
    owner: redis
    group: root
  notify:
    - restart redis

- name: Start redis and configure to startup automatically
  service:
    name: redis
    state: started
    enabled: yes

- name: Install automation-services-catalog
  package:
    name: "{{ automationcatalog_package_name }}"
    state: latest
  notify: Restart automation-services-catalog

- name: Set Automation Controller main URL
  set_fact:
    automation_controller_main_url: "{{ (_nginx_disable_https|bool) | ternary('http', 'https') }}://{{ hostvars[groups['automationcontroller'][0]]['_controller_main_hostname'] }}:{{ (_nginx_disable_https|bool) | ternary(_nginx_http_port, _nginx_https_port) }}"
  when: not automation_controller_main_url | default('') | length

- include_tasks: certificates.yml

- block:

    - fail:
        msg: 'API is unavailable as automationcatalog_controller_username or automationcatalog_controller_password are not defined. Moving on to the next method which is not idempotent. To fix, provide a license to your Controller environment along with a username and password in the inventory file.'
      when:
        - (not automationcatalog_controller_username | default('') | length) or (not automationcatalog_controller_password | default('') | length)

    - name: Configure Services Catalog client
      include_tasks: generate_controller_token.yml

  when:
    - not automationcatalog_controller_token | default('') | length

  rescue:
    ## This is not idempotent
    - name: Generate controller token if API is unavailable
      shell: "awx-manage create_oauth2_token --user {{ automationcatalog_controller_username | default('admin')}}"
      register: automationcatalog_controller_token_result
      no_log: true
      delegate_to: "{{ groups['automationcontroller'][0] }}"
      when:
        - groups['automationcontroller'] | default([]) | length

    - set_fact:
        automationcatalog_controller_token: "{{ automationcatalog_controller_token_result.stdout }}"
      no_log: true
      when:
        - groups['automationcontroller'] | default([]) | length

    - fail:
        msg: 'The controller url and credentials provided could not successfully generate a controller token. Please review the previous failure in the setup.log.'
      when:
        - not groups['automationcontroller'] | default([]) | length

- name: Define allowed hosts for automation-services-catalog
  set_fact:
    _automationcatalog_allowed_hostnames:
      - "{{ automationcatalog_main_url | urlsplit('hostname') }}"
      - "{{ automationcatalog_allowed_addresses }}"
      - "{{ automationcatalog_allowed_hostnames }}"

- name: Check for SECRET_KEY
  stat:
    path: "/etc/ansible-automation-platform/services-catalog/SECRET_KEY"
  register: automationcatalog_secret_key_path

- name: Set SECRET_KEY
  template:
    src: SECRET_KEY.j2
    dest: "/etc/ansible-automation-platform/services-catalog/SECRET_KEY"
    owner: pinakes
    group: root
    mode: "0600"
  no_log: True
  notify: Restart automation-services-catalog
  when: not automationcatalog_secret_key_path.stat.exists

- name: Get SECRET_KEY
  slurp:
    src: "/etc/ansible-automation-platform/services-catalog/SECRET_KEY"
  register: automationcatalog_secret_key_slurp
  no_log: True

- name: Configure catalog settings file
  template:
    src: settings.env.j2
    dest: "/etc/ansible-automation-platform/services-catalog/settings"
    owner: pinakes
    group: root
    mode: "0640"
  no_log: True
  notify: Restart automation-services-catalog

- name: Apply catalog nginx config
  template:
    src: "catalog-nginx.conf.j2"
    dest: "/etc/nginx/conf.d/catalog-nginx.conf"
    owner: root
    group: root
    mode: "0644"
  notify:
    - restart nginx

- name: Migrate the catalog database schema
  shell: export $(cat /etc/ansible-automation-platform/services-catalog/settings| xargs) && /var/lib/ansible-automation-platform/services-catalog/manage.py migrate
  become_user: pinakes
  become: true
  register: automationcatalog_migrate
  changed_when: "catalog_migrate.stdout is defined and 'No migrations to apply' not in automationcatalog_migrate.stdout"

- name: Collect static files
  shell: export $(cat /etc/ansible-automation-platform/services-catalog/settings | xargs) && umask 022 && /var/lib/ansible-automation-platform/services-catalog/manage.py collectstatic --noinput -c

- name: Configure firewall
  include_role:
    name: ansible.automation_platform_installer.firewall
