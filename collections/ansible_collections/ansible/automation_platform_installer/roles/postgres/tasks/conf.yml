---
- name: Update postgresql authentication settings
  template:
    dest: '{{ pg_hba_location }}'
    owner: postgres
    src: pg_hba.conf.j2
  register: pg_hba_conf

- name: Apply postgresql general settings
  template:
    dest: '{{ pg_conf_location }}'
    owner: postgres
    src: postgresql.conf.j2
  register: pg_general_conf

- name: Copy server SSL certificate
  copy:
    src: "{{ postgres_ssl_cert }}"
    dest: "{{ pg_conf_dir }}/server.crt"
    owner: postgres
    group: postgres
    mode: 0600
  when:
    - postgres_use_ssl|default(False)|bool
    - postgres_ssl_cert is defined
    - postgres_ssl_key is defined

- name: Copy server SSL private key
  copy:
    src: "{{ postgres_ssl_key }}"
    dest: "{{ pg_conf_dir }}/server.key"
    owner: postgres
    group: postgres
    mode: 0600
  when:
    - postgres_use_ssl|default(False)|bool
    - postgres_ssl_cert is defined
    - postgres_ssl_key is defined

- name: Use internal CA
  include_role:
    name: certificate_authority
    tasks_from: sign_service.yml
  vars:
    aap_ca_servicename: postgresql
    aap_service_owner: postgres
    aap_service_group: postgres
    aap_service_cert_path: '{{ pg_conf_dir }}'
    aap_service_cert_name: 'server'
    aap_service_cert_extension: 'crt'
  when:
    - postgres_use_ssl|default(False)|bool
    - postgres_ssl_cert is undefined
    - postgres_ssl_key is undefined

- name: Create unix socket directory
  file:
    path: '{{ postgres_run_dir }}'
    state: directory
    owner: 'postgres'
    group: 'postgres'
    mode: 02775
    setype: 'postgresql_var_run_t'

- name: Configure postgresql tmpfiles.d
  template:
    src: 'postgresql.tmpfiles.d.j2'
    dest: '/usr/lib/tmpfiles.d/postgresql.conf'
    owner: 'root'
    group: 'root'
    mode: '0644'
    setype: 'lib_t'

- name: restart postgresql when authentication settings changed
  service:
    name: '{{ postgres_init_name }}'
    state: restarted
  when: pg_hba_conf is changed or pg_general_conf is changed
  register: postgresql_restart

- name: wait for postgresql restart
  wait_for:
    host: localhost
    port: 5432
  when: postgresql_restart is changed

- name: configure postgresql to start automatically
  service:
    name: '{{ postgres_init_name }}'
    enabled: yes

- block:
    - name: check if awx pg user exists
      command: >-
        psql -tAc "SELECT COUNT(u.usename) FROM pg_catalog.pg_user u WHERE u.usename = '{{ postgres_username }}';"
      become: True
      become_user: postgres
      environment: '{{ extra_env | default(omit) }}'
      register: awx_pg_user_exists

    - name: create the awx postgres user if it does not exist and set the password
      command: >-
        psql -c "CREATE USER {{ postgres_username }} WITH PASSWORD '{{ postgres_password }}';"
      become: True
      become_user: postgres
      environment: '{{ extra_env | default(omit) }}'
      when:
       - "postgres_username is defined and postgres_username != ''"
       - "postgres_password is defined and postgres_password != ''"
       - "(awx_pg_user_exists.stdout | int) == 0"
      no_log: True

    - name: Set awx postgresql user password if user already exists (forces pg to rehash the password)
      command: >-
        psql -c "ALTER USER {{ postgres_username }} WITH PASSWORD '{{ postgres_password }}';"
      become: true
      become_user: postgres
      environment: '{{ extra_env | default(omit) }}'
      when:
       - "postgres_username is defined and postgres_username != ''"
       - "postgres_password is defined and postgres_password != ''"
       - "(awx_pg_user_exists.stdout | int) == 1"
      no_log: True

    - name: create the postgresql database for awx
      postgresql_db:
        name: "{{ postgres_database }}"
        owner: "{{ postgres_username }}"
        state: present
        login_user: postgres
      become: True
      become_user: postgres
      when:
        - "postgres_username is defined and postgres_username != ''"
        - "postgres_database is defined and postgres_database != ''"
  when:
    - groups['automationcontroller'] | default([]) | length

- block:
    - name: check if automationhub pg user exists
      command: >-
        psql -tAc "SELECT COUNT(u.usename) FROM pg_catalog.pg_user u WHERE u.usename = '{{ automationhub_postgres_username }}';"
      become: true
      become_user: postgres
      environment: '{{ extra_env | default(omit) }}'
      register: automationhub_pg_user_exists

    - name: create the automationhub postgres user if it does not exist and set the password
      command: >-
        psql -c "CREATE USER {{ automationhub_postgres_username }} WITH PASSWORD '{{ automationhub_postgres_password }}';"
      become: true
      become_user: postgres
      environment: '{{ extra_env | default(omit) }}'
      when:
        - "automationhub_postgres_username is defined and automationhub_postgres_username != ''"
        - "automationhub_postgres_password is defined and automationhub_postgres_password != ''"
        - "(automationhub_pg_user_exists.stdout | int) == 0"
      no_log: true

    - name: create the postgresql database for automationhub
      postgresql_db:
        name: "{{ automationhub_postgres_database }}"
        owner: "{{ automationhub_postgres_username }}"
        state: present
        login_user: postgres
      become: true
      become_user: postgres
      when:
        - "automationhub_postgres_username is defined and automationhub_postgres_username != ''"
        - "automationhub_postgres_database is defined and automationhub_postgres_database != ''"
  when:
    - groups['automationhub'] | default([]) | length

- block:
    - name: check if automationcatalog pg user exists
      command: >-
        psql -tAc "SELECT COUNT(u.usename) FROM pg_catalog.pg_user u WHERE u.usename = '{{ automationcatalog_postgres_username }}';"
      become: true
      become_user: postgres
      environment: '{{ extra_env | default(omit) }}'
      register: automationcatalog_pg_user_exists

    - name: create the automationcatalog postgres user if it does not exist and set the password
      command: >-
        psql -c "CREATE USER {{ automationcatalog_postgres_username }} WITH PASSWORD '{{ automationcatalog_postgres_password }}';"
      become: true
      become_user: postgres
      environment: '{{ extra_env | default(omit) }}'
      when:
        - "automationcatalog_postgres_username is defined and automationcatalog_postgres_username != ''"
        - "automationcatalog_postgres_password is defined and automationcatalog_postgres_password != ''"
        - "(automationcatalog_pg_user_exists.stdout | int) == 0"
      no_log: true

    - name: create the postgresql database for automationcatalog
      postgresql_db:
        name: "{{ automationcatalog_postgres_database }}"
        owner: "{{ automationcatalog_postgres_username }}"
        state: present
        login_user: postgres
      become: true
      become_user: postgres
      when:
        - "automationcatalog_postgres_username is defined and automationcatalog_postgres_username != ''"
        - "automationcatalog_postgres_database is defined and automationcatalog_postgres_database != ''"
  when:
    - groups['automationcatalog'] | default([]) | length
